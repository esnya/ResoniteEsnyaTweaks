name: .NET Build

on:
  push:
    branches:
      - master
      - feature/ci
    tags:
      - v*
  pull_request:
    branches:
      - master

permissions:
  contents: write
  actions: read
  id-token: write

jobs:
  vtag:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      tagged: ${{ steps.check-tag.outputs.tagged }}
      version: ${{ steps.extract-version.outputs.version }}
      tag: ${{ steps.extract-version.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from Directory.Build.props
        id: extract-version
        run: |
          VERSION=$(grep -o '<Version>[^<]*</Version>' Directory.Build.props | sed 's/<Version>\(.*\)<\/Version>/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Check if tag exists
        id: check-tag
        run: |
          TAG="v${{ steps.extract-version.outputs.version }}"
          if git rev-parse --verify "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
            echo "tagged=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG does not exist, creating new tag"
            echo "tagged=true" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.check-tag.outputs.tagged == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ steps.extract-version.outputs.version }}"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag "$TAG"
          git push origin "$TAG"
          echo "Created and pushed tag: $TAG"

  build:
    if: always() && (needs.vtag.result == 'success' || needs.vtag.result == 'skipped') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
    needs: [vtag]
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - project: FluxLoopTweaks
            artifact: EsnyaTweaks.FluxLoopTweaks.dll
          - project: LODGroupTweaks
            artifact: EsnyaTweaks.LODGroupTweaks.dll
          - project: PhotonDustTweaks
            artifact: EsnyaTweaks.PhotonDustTweaks.dll
          - project: SystemHelperTweaks
            artifact: EsnyaTweaks.SystemHelperTweaks.dll
          - project: UniLogTweaks
            artifact: EsnyaTweaks.UniLogTweaks.dll
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Steam Login Secret
        id: check-steam
        run: |
          if [ -z "${{ secrets.STEAMLOGIN }}" ]; then
            echo "steam-available=false" >> $GITHUB_OUTPUT
            echo "Warning: STEAMLOGIN secret is not available"
          else
            echo "steam-available=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Build
        env:
          STEAMLOGIN: ${{ secrets.STEAMLOGIN }}
        uses: esnya/build-rml-mod@v1
        with:
          project: ${{ github.workspace }}/${{ matrix.project }}
          steam-login: ${{ steps.check-steam.outputs.steam-available == 'true' && secrets.STEAMLOGIN || '' }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: bin/Release/${{ matrix.artifact }}

  release:
    if: (github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v')) || (needs.vtag.outputs.tagged == 'true')
    needs:
      - vtag
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Debug downloaded files
        run: |
          echo "=== Downloaded files ==="
          ls -la
          echo "=== Looking for DLL files ==="
          find . -name "*.dll" -type f || echo "No DLL files found"
          echo "=== End debug ==="

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            **/*.dll
          generate_release_notes: true
          tag_name: ${{ needs.vtag.outputs.tag || github.ref_name }}

