name: Build and Release EsnyaTweaks

on:
  push:
    branches:
      - master
      - feature/ci
      - ci
      - ci/*
    tags:
      - v*
  pull_request:
    branches:
      - master

permissions:
  contents: read

jobs:
  prepare-release:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci' || startsWith(github.ref, 'refs/heads/ci/'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from Directory.Build.props
        id: get_version
        run: |
          VERSION=$(grep -o '<Version>[^<]*</Version>' Directory.Build.props | sed -e 's/<Version>//' -e 's/<\/Version>//')
          echo "Version=$VERSION" >> $GITHUB_OUTPUT

      - name: Debug version info
        run: |
          echo "Found version: ${{ steps.get_version.outputs.Version }}"

      - name: Pull tags
        run: git fetch --tags

      - name: Check if tag exists
        id: check_tag
        run: |
          if [ -z "$(git tag -l "v${{ steps.get_version.outputs.Version }}")" ]; then
            echo "TagExists=false" >> $GITHUB_OUTPUT
          else
            echo "TagExists=true" >> $GITHUB_OUTPUT
          fi
    outputs:
      should_release: ${{ steps.check_tag.outputs.TagExists == 'false' }}
      version: ${{ steps.get_version.outputs.Version }}

  build:
    if: always() && (needs.prepare-release.result == 'success' || needs.prepare-release.result == 'skipped') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
    needs: [prepare-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - project: FluxLoopTweaks
            artifact: EsnyaTweaks.FluxLoopTweaks.dll
          - project: LODGroupTweaks
            artifact: EsnyaTweaks.LODGroupTweaks.dll
          - project: PhotonDustTweaks
            artifact: EsnyaTweaks.PhotonDustTweaks.dll
          - project: UniLogTweaks
            artifact: EsnyaTweaks.UniLogTweaks.dll
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Resonite environment
        id: build-env
        uses: resonite-modding-group/setup-resonite-env-action@v0.1.0
        with:
          steam-user: ${{ secrets.STEAMUSER }}
          steam-password: ${{ secrets.STEAMPASS }}

      - name: Install ResoniteModLoader and Harmony
        run: |
          set -euo pipefail
          LIBS_PATH="${{ steps.build-env.outputs.libraries-path }}"
          RESONITE_DIR="$(dirname "${LIBS_PATH}")"
          echo "Libraries: ${LIBS_PATH}"
          echo "Resonite dir: ${RESONITE_DIR}"
          mkdir -p "${LIBS_PATH}"
          mkdir -p "${RESONITE_DIR}/rml_libs"
          # Download RML
          curl -fsSL -o "${LIBS_PATH}/ResoniteModLoader.dll" \
            https://github.com/resonite-modding-group/ResoniteModLoader/releases/latest/download/ResoniteModLoader.dll
          # Download Harmony DLL. Try rml_libs, fallback to root if needed
          if ! curl -fsSL -o "${RESONITE_DIR}/rml_libs/0Harmony.dll" \
            https://github.com/resonite-modding-group/ResoniteModLoader/releases/latest/download/0Harmony.dll; then
            echo "Falling back to placing 0Harmony.dll in Resonite root"
            curl -fsSL -o "${RESONITE_DIR}/0Harmony.dll" \
              https://github.com/resonite-modding-group/ResoniteModLoader/releases/latest/download/0Harmony.dll
          fi

      - name: Build RML mod
        run: |
          dotnet restore
          dotnet build ${{ matrix.project }} --configuration Release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.project }}/bin/Release/net9.0/${{ matrix.artifact }}

  release:
    if: needs.prepare-release.outputs.should_release == 'true'
    needs: [build, prepare-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create tag
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag "v${{ needs.prepare-release.outputs.version }}"
          git push origin "v${{ needs.prepare-release.outputs.version }}"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Debug downloaded files
        run: |
          echo "=== Downloaded files ==="
          ls -la
          echo "=== Looking for DLL files ==="
          find . -name "*.dll" -type f || echo "No DLL files found"
          echo "=== End debug ==="

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            **/*.dll
          generate_release_notes: true
          tag_name: v${{ needs.prepare-release.outputs.version }}
