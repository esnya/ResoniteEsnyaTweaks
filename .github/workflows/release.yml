name: Build and Release EsnyaTweaks

on:
  push:
    branches:
      - master
      - feature/ci
      - ci
      - ci/*
    tags:
      - v*
  pull_request:
    branches:
      - master

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare-release:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/ci' || startsWith(github.ref, 'refs/heads/ci/'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from Directory.Build.props
        id: get_version
        run: |
          VERSION=$(grep -o '<Version>[^<]*</Version>' Directory.Build.props | sed -e 's/<Version>//' -e 's/<\/Version>//')
          echo "Version=$VERSION" >> $GITHUB_OUTPUT

      - name: Debug version info
        run: |
          echo "Found version: ${{ steps.get_version.outputs.Version }}"

      - name: Pull tags
        run: git fetch --tags

      - name: Check if tag exists
        id: check_tag
        run: |
          if [ -z "$(git tag -l "v${{ steps.get_version.outputs.Version }}")" ]; then
            echo "TagExists=false" >> $GITHUB_OUTPUT
          else
            echo "TagExists=true" >> $GITHUB_OUTPUT
          fi
    outputs:
      should_release: ${{ steps.check_tag.outputs.TagExists == 'false' }}
      version: ${{ steps.get_version.outputs.Version }}

  build:
    if: always() && (needs.prepare-release.result == 'success' || needs.prepare-release.result == 'skipped') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
    needs: [prepare-release]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: true
          cache-dependency-path: |
            **/packages.lock.json

      - name: .NET format
        run: |
          dotnet format --verify-no-changes --no-restore

      - name: Build solution
        run: |
          dotnet build -c ${{ matrix.configuration }} -v:minimal -warnaserror -bl:build-${{ matrix.configuration }}.binlog

      - name: Test solution
        run: |
          dotnet test -c ${{ matrix.configuration }} -v:minimal -warnaserror --logger "trx;LogFileName=test-results-${{ matrix.configuration }}.trx"


      - name: Collect artifacts (EsnyaTweaks.* only, excluding tests)
        if: matrix.configuration == 'Release'
        run: |
          set -euo pipefail
          mkdir -p artifacts
          find . -type f -path "*/bin/Release/*" -name "EsnyaTweaks.*.dll" \
            | grep -v -E "(\\.Tests|/Tests/|/Shared.Tests/|/obj/|/ref/)" \
            | xargs -I{} cp -v "{}" artifacts/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dll-artifacts
          path: artifacts/*

  release:
    if: needs.prepare-release.outputs.should_release == 'true'
    needs: [build, prepare-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create tag
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag "v${{ needs.prepare-release.outputs.version }}"
          git push origin "v${{ needs.prepare-release.outputs.version }}"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Debug downloaded files
        run: |
          echo "=== Downloaded files ==="
          ls -la
          echo "=== Looking for DLL files ==="
          find . -name "*.dll" -type f || echo "No DLL files found"
          echo "=== End debug ==="

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*
          generate_release_notes: true
          tag_name: v${{ needs.prepare-release.outputs.version }}
