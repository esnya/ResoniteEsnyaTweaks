<Project>
  <PropertyGroup>
    <Authors>esnya</Authors>
    <RepositoryUrl>https://github.com/esnya/EsnyaTweaks</RepositoryUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageTags>Resonite,Mod,ResoniteModLoader</PackageTags>
    <Version>1.0.0</Version>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <Product>$(AssemblyTitle)</Product>
    <RootNamespace Condition="'$(RootNamespace)'==''"
    >EsnyaTweaks.$(MSBuildProjectName)</RootNamespace>
    <AssemblyName Condition="'$(AssemblyName)'==''">EsnyaTweaks.$(MSBuildProjectName)</AssemblyName>
    <AssemblyTitle Condition="'$(AssemblyTitle)'==''">$(AssemblyName)</AssemblyTitle>
    <Title Condition="'$(Title)'==''">$(AssemblyTitle)</Title>
    <Copyright>Copyright (c) 2025 $(Authors)</Copyright>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <CopyToMods Condition="'$(CopyToMods)'==''">true</CopyToMods>
    <DebugType Condition="'$(Configuration)'=='Debug'">embedded</DebugType>
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisLevel>latest-all</AnalysisLevel>
    <WarningLevel>9999</WarningLevel>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <!-- Opt-in gate for StyleCop analyzers; default off to avoid network restore in restricted env -->
    <UseStyleCopAnalyzers Condition="'$(UseStyleCopAnalyzers)'==''">false</UseStyleCopAnalyzers>
  </PropertyGroup>
  <PropertyGroup Condition="$(MSBuildProjectName.EndsWith('.Tests'))">
    <IsPackable>false</IsPackable>
    <IsTestProject>true</IsTestProject>
    <OutputType>Exe</OutputType>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <TreatWarningsAsErrors Condition="'$(Configuration)'=='Release'">true</TreatWarningsAsErrors>
    <NoWarn>$(NoWarn);CA1515</NoWarn>
  </PropertyGroup>
  <PropertyGroup Condition="'$(ResonitePath)'==''">
    <ResonitePath>$(MSBuildThisFileDirectory)Resonite/</ResonitePath>
    <ResonitePath Condition="Exists('$(MSBuildProjectDirectory)\Resonite\')">$(MSBuildProjectDirectory)\Resonite\</ResonitePath>
    <ResonitePath Condition="Exists('C:\Program Files (x86)\Steam\steamapps\common\Resonite\')">C:\Program Files (x86)\Steam\steamapps\common\Resonite\</ResonitePath>
    <ResonitePath Condition="Exists('$(HOME)/.steam/steam/steamapps/common/Resonite/')">$(HOME)/.steam/steam/steamapps/common/Resonite/</ResonitePath>
    <ResonitePath Condition="Exists('C:\Program Files\Steam\steamapps\common\Resonite\')">C:\Program Files\Steam\steamapps\common\Resonite\</ResonitePath>
    <ResonitePath Condition="Exists('$(USERPROFILE)\.steam\steam\steamapps\common\Resonite\')">$(USERPROFILE)\.steam\steam\steamapps\common\Resonite\</ResonitePath>
    <ResonitePath Condition="Exists('$(HOME)/.local/share/Steam/steamapps/common/Resonite/')">$(HOME)/.local/share/Steam/steamapps/common/Resonite/</ResonitePath>
    <ResonitePath Condition="Exists('/home/deck/.steam/steam/steamapps/common/Resonite/')">/home/deck/.steam/steam/steamapps/common/Resonite/</ResonitePath>
    <!-- WSL2 mounts: Windows Steam under /mnt/* -->
    <ResonitePath Condition="Exists('/mnt/c/Program Files (x86)/Steam/steamapps/common/Resonite/')">/mnt/c/Program Files (x86)/Steam/steamapps/common/Resonite/</ResonitePath>
    <ResonitePath Condition="Exists('/mnt/c/Program Files/Steam/steamapps/common/Resonite/')">/mnt/c/Program Files/Steam/steamapps/common/Resonite/</ResonitePath>
    <ResonitePath Condition="Exists('/mnt/c/SteamLibrary/steamapps/common/Resonite/')">/mnt/c/SteamLibrary/steamapps/common/Resonite/</ResonitePath>
    <ResonitePath Condition="Exists('/mnt/d/SteamLibrary/steamapps/common/Resonite/')">/mnt/d/SteamLibrary/steamapps/common/Resonite/</ResonitePath>
  </PropertyGroup>
  <PropertyGroup>
    <FrooxEnginePresent Condition="Exists('$(ResonitePath)FrooxEngine.dll')">true</FrooxEnginePresent>
    <FrooxEnginePresent Condition="'$(FrooxEnginePresent)'==''">false</FrooxEnginePresent>
  </PropertyGroup>
  <ItemGroup Condition="'$(FrooxEnginePresent)'=='true'">
    <Reference Include="ResoniteModLoader">
      <HintPath Condition="Exists('$(ResonitePath)Libraries/ResoniteModLoader.dll')">$(ResonitePath)Libraries/ResoniteModLoader.dll</HintPath>
      <HintPath Condition="Exists('$(ResonitePath)ResoniteModLoader.dll')">$(ResonitePath)ResoniteModLoader.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
    <Reference Include="HarmonyLib">
      <HintPath>$(ResonitePath)rml_libs/0Harmony.dll</HintPath>
      <HintPath Condition="Exists('$(ResonitePath)0Harmony.dll')">$(ResonitePath)0Harmony.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
    <Reference Include="FrooxEngine">
      <HintPath>$(ResonitePath)FrooxEngine.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
    <Reference Include="Elements.Core">
      <HintPath>$(ResonitePath)Elements.Core.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
    <Reference Include="Newtonsoft.Json">
      <HintPath>$(ResonitePath)Newtonsoft.Json.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
    <Reference Include="ResoniteHotReloadLib" Condition="'$(Configuration)'=='Debug'">
      <HintPath>$(ResonitePath)rml_libs/ResoniteHotReloadLib.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
    <Reference Include="ResoniteHotReloadLibCore" Condition="'$(Configuration)'=='Debug'">
      <HintPath>$(ResonitePath)rml_libs/ResoniteHotReloadLibCore.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
    <Reference Include="ProtoFlux.Core">
      <HintPath>$(ResonitePath)ProtoFlux.Core.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
    <Reference Include="ProtoFlux.Nodes.FrooxEngine">
      <HintPath>$(ResonitePath)ProtoFlux.Nodes.FrooxEngine.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
  </ItemGroup>

  <ItemGroup Condition="'$(FrooxEnginePresent)'!='true'">
    <PackageReference Include="Resonite.GameLibs" />
    <Reference Include="ResoniteModLoader">
      <HintPath>$(MSBuildThisFileDirectory)Resonite/ResoniteModLoader.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
    <Reference Include="HarmonyLib">
      <HintPath>$(MSBuildThisFileDirectory)Resonite/0Harmony.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup Condition="'$(FrooxEnginePresent)'!='true' and '$(Configuration)'=='Debug'">
    <Reference Include="ResoniteHotReloadLib">
      <HintPath>$(MSBuildThisFileDirectory)Resonite/ResoniteHotReloadLib.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
    <Reference Include="ResoniteHotReloadLibCore">
      <HintPath>$(MSBuildThisFileDirectory)Resonite/ResoniteHotReloadLibCore.dll</HintPath>
      <Private>$(IsTestProject)</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup Condition="$(IsTestProject) == 'true'">
    <PackageReference Include="xunit.v3" />
    <PackageReference Include="xunit.runner.visualstudio">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="xunit.v3.runner.inproc.console" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" />
    <PackageReference Include="Moq" />
    <PackageReference Include="FluentAssertions" />
    <PackageReference Include="AutoFixture" />
    <PackageReference Include="AutoFixture.AutoMoq" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" />
    <PackageReference Include="coverlet.collector">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="coverlet.msbuild">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <!-- Share global usings across all test projects -->
    <Compile Include="$(MSBuildThisFileDirectory)Tests/GlobalUsings.cs" Link="GlobalUsings.cs" Condition="Exists('$(MSBuildThisFileDirectory)Tests/GlobalUsings.cs')" />
  </ItemGroup>
  <ItemGroup>
    <!-- Conditional StyleCop.Analyzers (opt-in via -p:UseStyleCopAnalyzers=true) -->
    <PackageReference Include="StyleCop.Analyzers" PrivateAssets="all" IncludeAssets="analyzers" Condition="'$(UseStyleCopAnalyzers)'=='true'" />
    <EditorConfigFiles Remove="$(MSBuildThisFileDirectory)**\*.editorconfig" />
    <None Include="$(MSBuildThisFileDirectory)README.md" Link="README.md" />
    <None Include="$(MSBuildThisFileDirectory)LICENSE" Link="LICENSE" />
    <None Include="$(MSBuildThisFileDirectory).editorconfig" Link=".editorconfig" />
    <None Include="$(MSBuildThisFileDirectory).gitignore" Link=".gitignore" />
    <None Include="$(MSBuildThisFileDirectory).gitattributes" Link=".gitattributes" />
    <None Include="$(MSBuildThisFileDirectory)Directory.Build.props" Link="Directory.Build.props" />
    <None
      Include="$(MSBuildThisFileDirectory)Directory.Build.targets"
      Link="Directory.Build.targets"
    />
    <None
      Include="$(MSBuildThisFileDirectory).github\workflows\release.yml"
      Link=".github\workflows\release.yml"
    />
  </ItemGroup>
</Project>
